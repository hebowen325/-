#define HomeWorkAPI extern "C" __declspec(dllexport)
#include<string>

typedef struct StudentNode
{
	char name[16];
	char id[16];
	short score;
}StudentNode;

typedef struct StudentPtr
{
	struct StudentNode student;
	struct StudentPtr *NextAddr;
}StudentPtr;

typedef struct BiTreeNode
{
	int data;
	struct BiTreeNode *lchild,*rchild;	
	struct BiTreeNode *parent;
}BiTreeNode;

typedef struct HuffmanTree
{
	BiTreeNode* root;
	BiTreeNode** leaves;
	char** HuffmanCode;
}HuffmanTree;

typedef struct FileString
{
	char *Filestring;
	char *Character;
	int *Frequency;
	int Number;
	int Type;
	HuffmanTree *Tree;
}FileString;

FileString g_FileStringmgr;
typedef struct SeqStudentListByPtr
{
	struct StudentNode* student;
	int count;
}SeqStudentLIstByPtr;
const char* myName = "贺博文";

HomeWorkAPI const char* GetName()
{
	return myName;
}

const char* myID = "57017128";

HomeWorkAPI const char* GetID()
{
	return myID;
}

typedef struct StudentList
{
	struct StudentPtr* head;
	int count;
	int size;
}StudentList;

typedef struct StudentStack
{
	struct SeqStudentListByPtr students;
	int size;
}StudentStack;

typedef struct StudentQueue
{
	struct StudentPtr* head;
	struct StudentPtr* tail;
	int count;
	int size;
}StudentQueue;

struct StudentList g_StudentListMgr; 
struct StudentStack g_StudentStackMgr;
struct StudentQueue g_StudentQueueMgr;

HuffmanTree* HuffmanDecode(int a[],int number)
{
	HuffmanTree* Treeptr;
	Treeptr=(HuffmanTree *)malloc(sizeof(HuffmanTree));
	BiTreeNode **T1;
	T1=(BiTreeNode **)malloc(number*sizeof(BiTreeNode));
    BiTreeNode *TmpNode;
	for(int firstcount=0;firstcount<number;firstcount++)
	{
		T1[firstcount]=(BiTreeNode *)malloc(sizeof(BiTreeNode));
		T1[firstcount]->data=a[firstcount];
		T1[firstcount]->lchild=NULL;
		T1[firstcount]->rchild=NULL;
		T1[firstcount]->parent=NULL;
	}
	Treeptr->leaves=(BiTreeNode **)malloc(number*sizeof(BiTreeNode));
	for(int firstcount=0;firstcount<number;firstcount++)
	{
		Treeptr->leaves[firstcount]=T1[firstcount];
	}
	for(int count=0;count<number-1;count++)
	{
		for(int firstcount=count;firstcount<number;firstcount++)
		{
			for(int secondcount=number-1;secondcount>firstcount;secondcount--)
			{
				if(T1[secondcount-1]->data>T1[secondcount]->data)
				{
					BiTreeNode *tmpptr;
					tmpptr=T1[secondcount-1];
					T1[secondcount-1]=T1[secondcount];
					T1[secondcount]=tmpptr;
				}
			}
		}
		TmpNode=(BiTreeNode *)malloc(sizeof(BiTreeNode));
		TmpNode->data=T1[count]->data+T1[count+1]->data;
		TmpNode->lchild=T1[count];
		TmpNode->rchild=T1[count+1];
		TmpNode->parent=NULL;
		T1[count]->parent=T1[count+1]->parent=TmpNode;
		T1[count]=NULL;
		T1[count+1]=TmpNode;
	}
	free(T1);
	Treeptr->root=TmpNode;
	Treeptr->HuffmanCode=(char **)malloc(sizeof(char *)*number);
	char*tmp;
	tmp=(char*)malloc(sizeof(char)*200);
	int codelength=0;
	BiTreeNode *Tmpptr;
	for(int count=0;count<number;count++)
	{
		Tmpptr=Treeptr->leaves[count];
		while(Tmpptr!=Treeptr->root)
		{
			if(Tmpptr==(Tmpptr->parent)->lchild)
			{
				tmp[codelength++]='0';
			}
			if(Tmpptr==(Tmpptr->parent)->rchild)
			{
				tmp[codelength++]='1';
			}
			Tmpptr=Tmpptr->parent;
		}
		Treeptr->HuffmanCode[count]=(char*)malloc(sizeof(char)*(codelength+1));//每个编码最后一位置0
        Treeptr->HuffmanCode[count][codelength]=0;
		for(int codecount=0;codecount<codelength;codecount++)
		{
			Treeptr->HuffmanCode[count][codecount]=tmp[codelength-codecount-1];
		}
		codelength=0;
	}
	free(tmp);
	return Treeptr;
}

/************************* 链表作业 ***********************/

/*
初始化一个动态链表，可以进行后续的增删改查操作
*/
extern struct StudentList g_StudentListMgr; 
HomeWorkAPI bool InitializeDynamicList(unsigned short MaxListLength)
{
	g_StudentListMgr.head=NULL;
	g_StudentListMgr.count=0;
	g_StudentListMgr.size=(int)MaxListLength;
	return true;
}

/*
插入一个学生的信息，如果失败则返回false
*/
HomeWorkAPI bool InsertStudent(const char* name , const char* id , short score)
{
	if(g_StudentListMgr.count==g_StudentListMgr.size)
	{
		return false;
	}
	else
	{
		struct StudentPtr *tmpNode=(struct StudentPtr*)malloc(sizeof(struct StudentPtr));
		if(tmpNode!=NULL)
		{
			strcpy_s((tmpNode->student).name,name);
			strcpy_s((tmpNode->student).id,id);
			(tmpNode->student).score=score;
			tmpNode->NextAddr=g_StudentListMgr.head;
			g_StudentListMgr.head=tmpNode;
			g_StudentListMgr.count++;
			return true;
		}
		else
		{
			return false;
		}
	}
}

/*
删除一个学生的信息，如果失败则返回false
*/
HomeWorkAPI bool RemoveStudent(const char* id)
{
	struct StudentPtr *tmpNode,*tmpPreNode;
	tmpNode=tmpPreNode=g_StudentListMgr.head;
	while(tmpNode!=NULL)
	{
		if(!strcmp((tmpNode->student).id,id))
		{
			break;
		}
		else
		{
			tmpPreNode=tmpNode;
			tmpNode=tmpNode->NextAddr;
		}
	}
	if(tmpNode==NULL)
	{
		return false;
	}
	if(tmpNode==tmpPreNode)
	{
		g_StudentListMgr.head=tmpNode->NextAddr;
	}
	else
	{
		tmpPreNode->NextAddr=tmpNode->NextAddr;
	}
	g_StudentListMgr.count--;
	free(tmpNode);
	return true;
}

/*
获取学生的数量
*/
HomeWorkAPI unsigned short GetStudentCount()
{
	return g_StudentListMgr.count;
}

/*
根据ID获取学生的成绩
*/
HomeWorkAPI bool GetScoreByID(const char* id , short* score)
{
	struct StudentPtr* tmpNode;
	tmpNode=g_StudentListMgr.head;
	while(tmpNode!=NULL)
	{
     if(!strcmp((tmpNode->student).id,id))
	 {
      (*score)=(tmpNode->student).score;
	  return true;
	 }
	 tmpNode=tmpNode->NextAddr;
	}
    return false;
}

/*
根据ID设置学生的成绩
*/
HomeWorkAPI bool SetScoreByID(const char* id , short score)
{
	struct StudentPtr* tmpNode;
	tmpNode=g_StudentListMgr.head;
	while(tmpNode!=NULL)
	{
		if(!strcmp((tmpNode->student).id,id))
		{
			(tmpNode->student).score=score;
			return true;
		}
		tmpNode=tmpNode->NextAddr;
	}
	return false;
}

/*
清除所有已经建立的结构，释放内存
*/

HomeWorkAPI bool FinalizeDynamicList()
{
  struct StudentPtr* tmpNode;
  tmpNode=g_StudentListMgr.head;
  while(tmpNode!=NULL)
  {
     g_StudentListMgr.head=g_StudentListMgr.head->NextAddr;
	 free(tmpNode);
	 tmpNode=g_StudentListMgr.head;
  }
  g_StudentListMgr.count=0;
  g_StudentListMgr.size=0;
  return true;
}

/***********************************************************/
/*
初始化一个栈，可以进行后续的增删改查操作
*/
HomeWorkAPI bool InitializeStack(unsigned short MaxLength)
{
	g_StudentStackMgr.size=MaxLength;
	g_StudentStackMgr.students.student=(struct StudentNode *)malloc(MaxLength*sizeof(struct StudentNode));
	g_StudentStackMgr.students.count=0;
	if(g_StudentStackMgr.students.student==NULL)
	{
		return false;
	}
	return true;
}

/*
压入一个学生的信息，如果失败则返回false
*/
HomeWorkAPI bool PushStudent(const char* name , const char* id , short score)
{
	if(g_StudentStackMgr.students.count==g_StudentStackMgr.size)
	{
		return false;
	}
	else
	{
		strcpy_s(g_StudentStackMgr.students.student[g_StudentStackMgr.students.count].id,id);
		strcpy_s(g_StudentStackMgr.students.student[g_StudentStackMgr.students.count].name,name);
		g_StudentStackMgr.students.student[g_StudentStackMgr.students.count].score=score;
		g_StudentStackMgr.students.count++;
		return true;
	}
}

/*
获取学生的数量
*/
HomeWorkAPI unsigned short GetStudentCountInStack()
{
	return g_StudentStackMgr.students.count;
}

/*
弹出一个学生的信息，如果失败则返回false
*/
HomeWorkAPI bool PopStudent(char* name , char* id , short* score)
{
	if(g_StudentStackMgr.students.count==0)
	{
		return false;
	}
	strcpy_s(name,16,g_StudentStackMgr.students.student[g_StudentStackMgr.students.count-1].name);
	strcpy_s(id,16,g_StudentStackMgr.students.student[g_StudentStackMgr.students.count-1].id);
	*score=g_StudentStackMgr.students.student[g_StudentStackMgr.students.count-1].score;
	g_StudentStackMgr.students.count--;
	return true;
}

HomeWorkAPI bool FinalizeStack()
{
	free(g_StudentStackMgr.students.student);
	g_StudentStackMgr.students.count=0;
    g_StudentStackMgr.size=0;
	g_StudentStackMgr.students.count=0;
	return true;
}


/**********************************************************/



/************************* 队列作业 ***********************/

/*
初始化一个队列，可以进行后续的增删改查操作
*/
HomeWorkAPI bool InitializeQueue(unsigned short MaxLength)
{
	g_StudentQueueMgr.head=g_StudentQueueMgr.tail=NULL;
	g_StudentQueueMgr.count=0;
	g_StudentQueueMgr.size=MaxLength;
	return true;
}

/*
压入一个学生的信息，如果失败则返回false
*/
HomeWorkAPI bool EnQueStudent(const char* name , const char* id , short score)
{
	if(g_StudentQueueMgr.count==g_StudentQueueMgr.size)
	{
		return false;
	}
	struct StudentPtr* tmpPtr;
	tmpPtr=(struct StudentPtr*)malloc(sizeof(struct StudentPtr));
	if(tmpPtr==NULL)
	{
		return false;
	}
	strcpy_s(tmpPtr->student.id,id);
	strcpy_s(tmpPtr->student.name,name);
	tmpPtr->student.score=score;
	if(g_StudentQueueMgr.head==NULL)
	{
		g_StudentQueueMgr.head=g_StudentQueueMgr.tail=tmpPtr;
	}
	else
	{
		g_StudentQueueMgr.head->NextAddr=tmpPtr;
		g_StudentQueueMgr.head=tmpPtr;
	}
	g_StudentQueueMgr.count++;
	return true;
}

/*
获取学生的数量
*/
HomeWorkAPI unsigned short GetStudentCountInQueue()
{
	return g_StudentQueueMgr.count;
}

/*
弹出一个学生的信息，如果失败则返回false
*/
HomeWorkAPI bool DeQueStudent(char* name , char* id , short* score)
{
	if(g_StudentQueueMgr.count==0)
	{
		return false;
	}
	StudentPtr* tmpPtr;
	strcpy_s(name,16,g_StudentQueueMgr.tail->student.name);
	strcpy_s(id,16,g_StudentQueueMgr.tail->student.id);
	*score=g_StudentQueueMgr.tail->student.score;
	tmpPtr=g_StudentQueueMgr.tail->NextAddr;
	free(g_StudentQueueMgr.tail);
	g_StudentQueueMgr.tail=tmpPtr;
	g_StudentQueueMgr.count--;
	return true;
}

HomeWorkAPI bool FinalizeQueue()
{
	StudentPtr* tmpPtr;
	while(g_StudentQueueMgr.count!=0)
	{
		tmpPtr=g_StudentQueueMgr.tail->NextAddr;
		free(g_StudentQueueMgr.tail);
		g_StudentQueueMgr.tail=tmpPtr;
		g_StudentQueueMgr.count--;
	}
	g_StudentQueueMgr.head=g_StudentQueueMgr.tail=NULL;
	g_StudentQueueMgr.size=0;
	return true;
}

/**********************************************************/


/************************* 哈夫曼编码作业 ***********************/
/*
根据输入的路径名读取一个样本文件中的内容，并对其中所有字符的出现次数
进行计数，随后需要计算出每一个字母的出现概率
内部选择怎样的数据结构来维护每一个出现的字符的出现概率可以自行决定
*/
HomeWorkAPI void InputExampleFile(const char* filePath)
{
	FILE *fp=NULL;
	char *buf;
	buf=(char *)malloc(1000*sizeof(char));
	fopen_s(&fp,filePath,"r");
	if(fp==NULL)
	{
		printf("failed to open");
	}
	else
	{
		fgets(buf,1000,fp);
	}
	for(g_FileStringmgr.Number=0;buf[g_FileStringmgr.Number]!=0;g_FileStringmgr.Number++);
	g_FileStringmgr.Filestring=(char *)malloc(sizeof(char)*(g_FileStringmgr.Number+1));
	for(int count=0;count<g_FileStringmgr.Number;count++)
	{
		g_FileStringmgr.Filestring[count]=buf[count];
	}
	g_FileStringmgr.Filestring[g_FileStringmgr.Number]=0;
	free(buf);
	g_FileStringmgr.Type=0;
	char *tmp;
	bool judge;
	tmp=(char *)malloc(1000*sizeof(char));
	for(int count=0;count<g_FileStringmgr.Number;count++)
	{
		judge=1;
		for(int secondcount=0;secondcount<count;secondcount++)
		{
			if(g_FileStringmgr.Filestring[count]==g_FileStringmgr.Filestring[secondcount])
			{
				judge=0;
			}
		}
		if(judge==1)
		{
			tmp[g_FileStringmgr.Type++]=g_FileStringmgr.Filestring[count];
		}
	}
	g_FileStringmgr.Character=(char*)malloc(g_FileStringmgr.Type*sizeof(char));
	for(int count=0;count<g_FileStringmgr.Type;count++)
	{
		g_FileStringmgr.Character[count]=tmp[count];
	}
	free(tmp);
	g_FileStringmgr.Frequency=(int*)malloc(sizeof(int)*g_FileStringmgr.Type);
	for(int count=0;count<g_FileStringmgr.Type;count++)
	{
		g_FileStringmgr.Frequency[count]=0;
		for(int secondcount=0;secondcount<g_FileStringmgr.Number;secondcount++)
		{
			if(g_FileStringmgr.Filestring[secondcount]==g_FileStringmgr.Character[count])
			{
				g_FileStringmgr.Frequency[count]++;
			}
		}
	}
	g_FileStringmgr.Tree=HuffmanDecode(g_FileStringmgr.Frequency,g_FileStringmgr.Type);
	return;
}

/*
获取当前已经分析的样本文件中字符的种类
*/
HomeWorkAPI int GetInputCharCount()
{
	return g_FileStringmgr.Type;
}

/*
返回输入的字符的出现概率，如果没出现过则返回0
*/
HomeWorkAPI float GetRatioOfChar(char inputChar)
{
	for(int count=0;count<g_FileStringmgr.Type;count++)
	{
		if(inputChar==g_FileStringmgr.Character[count])
		{
			return (float)(g_FileStringmgr.Frequency[count])/(float)(g_FileStringmgr.Number);
		}
	}
	return 0;
}

/*
获取一个输入字符的编码，codeBuf由调用者负责申请数组，同学们可以不用担心
codeBuf中采用‘1’和‘0’进行编码
如果输入的字符没有出现过，则返回false
*/
HomeWorkAPI bool GetCodeOfChar(char inputChar , char* codeBuf)
{
	for(int count=0;count<g_FileStringmgr.Type;count++)
	{
		if(inputChar==g_FileStringmgr.Character[count])
		{
			strcpy_s(codeBuf,strlen(g_FileStringmgr.Tree->HuffmanCode[count]),g_FileStringmgr.Tree->HuffmanCode[count]);
			return true;
		}
	}
	return false;
}
/*
对输入的文件中的内容计算编码长度，采用‘1’和‘0’进行编码
返回总的编码长度，因为是练习题，所以编码长度远大于文件的长度，正常的
*/
HomeWorkAPI unsigned long GetCodeBufLength(const char* filePath)
{
	InputExampleFile(filePath);
	unsigned long sum=0;
	for(int count=0;count<g_FileStringmgr.Type;count++)
	{
		sum+=strlen(g_FileStringmgr.Tree->HuffmanCode[count]);
	}
	return sum;
}
/*
对输入的文件中的内容进行编码,codeBuf由调用者负责申请数组，同学们可以不用担心
codeBuf中采用‘1’和‘0’进行编码
*/
HomeWorkAPI unsigned long Encode(const char* filePath , char* codeBuf)
{
	int pos=0;
	int charactersearch;
	InputExampleFile(filePath);
	for(int count=0;count<g_FileStringmgr.Number;count++)
	{
		for(charactersearch=0;g_FileStringmgr.Filestring[count]!=g_FileStringmgr.Character[charactersearch];charactersearch++);
		for(unsigned int codecount=0;codecount<strlen(g_FileStringmgr.Tree->HuffmanCode[charactersearch]);codecount++)
		{
			codeBuf[pos++]=g_FileStringmgr.Tree->HuffmanCode[charactersearch][codecount];
		}
	}
	codeBuf[pos]=0;
	return 0;
}

/*
使用输入的codeBuf（外部已经进行了内存分配）中的编码，采用你的编码方案还原成字符，
写入到filePath指定的文件中，其中codeBuf中的有效长度由length设定
*/
HomeWorkAPI bool Decode(const char* filePath , char* codeBuf , unsigned long length)
{
	unsigned long pos=0;
	char a[200];
	int charcount=0;
	while(pos<length)
	{
		for(int count=0;count<g_FileStringmgr.Type;count++)
		{
			if(!strncmp(&(codeBuf[pos]),g_FileStringmgr.Tree->HuffmanCode[count],strlen(g_FileStringmgr.Tree->HuffmanCode[count])))
			{
				a[charcount++]=g_FileStringmgr.Character[count];
				pos+=strlen(g_FileStringmgr.Tree->HuffmanCode[count]);
				break;
			}
			if(count==g_FileStringmgr.Type-1)
			{
				return false;
			}
		}
	}
	a[charcount]=0;
	char *string;
	string=(char *)malloc((charcount+1)*sizeof(char));
	strcpy_s(string,charcount+1,a);
	FILE *fp=NULL;
	fopen_s(&fp,filePath,"w");
	if(fp==NULL)
	{
		return false;
	}
	else
	{
		fputs(string,fp);
	}
	return true;
}

typedef struct ThreadBiNodeTree
{
	char data;
	ThreadBiNodeTree *lchild;
	ThreadBiNodeTree *rchild;
	bool l_flag;
	bool r_flag;
}ThreadBiNodeTree;

ThreadBiNodeTree *pre=NULL;
void MidThreadingTraverse(ThreadBiNodeTree *T)
{
	if(pre!=NULL&&pre->rchild==NULL)
	{
		pre->r_flag=true;
		pre->rchild=T;
	}
	if(T->lchild==NULL)
	{
		T->l_flag=true;
		T->lchild=pre;
		pre=T;
	}
	else
	{
		if(T->l_flag==false)
		{
		pre=T;
		MidThreadingTraverse(T->lchild);
		}
	}
	if(T->rchild!=NULL&&T->r_flag==false)
	{
		MidThreadingTraverse(T->rchild);
	}
}

int main()
{
	ThreadBiNodeTree *Treeptr;
	Treeptr=(ThreadBiNodeTree *)malloc(5*sizeof(ThreadBiNodeTree));
	Treeptr[0].data='A';
	Treeptr[0].l_flag=Treeptr[0].r_flag=false;
	Treeptr[0].lchild=&Treeptr[1];
	Treeptr[0].rchild=&Treeptr[3];
	Treeptr[1].data='B';
    Treeptr[1].l_flag=Treeptr[1].r_flag=false;
	Treeptr[1].lchild=NULL;
	Treeptr[1].rchild=&Treeptr[2];
	Treeptr[2].data='D';
	Treeptr[2].l_flag=Treeptr[2].r_flag=false;
	Treeptr[2].lchild=NULL;
	Treeptr[2].rchild=NULL;
	Treeptr[3].data='C';
	Treeptr[3].l_flag=Treeptr[3].r_flag=false;
	Treeptr[3].lchild=&Treeptr[4];
	Treeptr[3].rchild=NULL;
	Treeptr[4].data='E';
	Treeptr[4].l_flag=Treeptr[4].r_flag=false;
	Treeptr[4].lchild=NULL;
	Treeptr[4].rchild=NULL;
	ThreadBiNodeTree *ptr;
	ptr=&Treeptr[0];
	MidThreadingTraverse(&Treeptr[0]);
	return 0;
}//中序线索二叉树的遍历与构造。
