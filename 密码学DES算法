#include<string>
#include<iostream>
using namespace std;
int expansion[48]={32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
int PC1[56]={57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4};
int PC2[48]={14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32};
int Turn[16]={1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1}; 
int S[8][64]={
14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,
15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,
10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,
7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14,
2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3,
12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,
4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12,
13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11};
int IP[64]={58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
int IP_[64]={40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25};
string secretkey[16];
int P[32]={16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25};
string convert4digits(int number)
{
	string answer;
	if(number/8==1)
	{
		answer+='1';
	    number=number-8;
	}
	else
	{
		answer+='0';
	}
	if(number/4==1)
	{
		answer+='1';
		number-=4;
	}
	else
	{
		answer+='0';
	}
	if(number/2==1)
	{
		answer+='1';
		number-=2;
	}
	else
	{
		answer+='0';
	}
	if(number%2==1)
	{
		answer+='1';
	}
	else
	{
		answer+='0';
	}
	return answer;
}

string convert8digits(int number)
{
	string answer;
	if(number/128==1)
	{
		answer+='1';
		number=number-128;
	}
	else
	{
		answer+='0';
	}
	if(number/64==1)
	{
		answer+='1';
		number=number-64;
	}
	else
	{
		answer+='0';
	}
	if(number/32==1)
	{
		answer+='1';
	    number=number-32;
	}
	else
	{
		answer+='0';
	}
	if(number/16==1)
	{
		answer+='1';
	    number=number-16;
	}
	else
	{
		answer+='0';
	}
	if(number/8==1)
	{
		answer+='1';
	    number=number-8;
	}
	else
	{
		answer+='0';
	}
	if(number/4==1)
	{
		answer+='1';
		number-=4;
	}
	else
	{
		answer+='0';
	}
	if(number/2==1)
	{
		answer+='1';
		number-=2;
	}
	else
	{
		answer+='0';
	}
	if(number%2==1)
	{
		answer+='1';
	}
	else
	{
		answer+='0';
	}
	return answer;

}
string TurnCalculate(string R,int turn)
{
	int count;
	string expansionR="";
	for(count=0;count<48;count++)
	{
		expansionR+=R[expansion[count]-1];
	}
	string Ss="";
	for(count=0;count<48;count++)
	{
		if(expansionR[count]!=secretkey[turn][count])
		{
			Ss+='1';
		}
		else
		{
			Ss+='0';
		}
	}
	int Splace[8];
	for(count=0;count<8;count++)
	{
		Splace[count]=(((((Ss[6*count+5])-48))+(((int)((Ss[6*count])-48))*2))*16+((int)((Ss[6*count+1])-48))*8+((int)((Ss[6*count+2])-48))*4+((int)((Ss[6*count+3])-48))*2+((int)((Ss[6*count+4])-48)));
		Splace[count]=S[count][Splace[count]];
	}
	string answer="";
	for(count=0;count<8;count++)
	{
		answer+=convert4digits(Splace[count]);
	}
	string Answer;
	for(count=0;count<32;count++)
	{
		Answer+=answer[P[count]-1];
	}
	return Answer;
}
string encryption(string plaintext2,int choose)
{
	string plaintext="";
	string LE[17];
	string RE[17];
	string tmp;
	int count;
	int count2;
	for(count=0;count<64;count++)
	{
		plaintext+=plaintext2[IP[count]-1];
	}
	LE[0].assign(plaintext,0,32);
	RE[0].assign(plaintext,32,32);
	for(count=0;count<16;count++)
	{
		RE[count+1]="";
		LE[count+1].assign(RE[count]);
		if(choose==1)
		{
			tmp.assign(TurnCalculate(RE[count],count));
		}
		if(choose==0)
		{
			tmp.assign(TurnCalculate(RE[count],15-count));
		}
		for(count2=0;count2<32;count2++)
		{
			if(LE[count][count2]!=tmp[count2])
			{
				RE[count+1]+='1';
			}
			else
			{
				RE[count+1]+='0';
			}
		}
	}
	plaintext2="";
	plaintext="";
	plaintext2=RE[16]+LE[16];
	for(count=0;count<64;count++)
	{
		plaintext+=plaintext2[IP_[count]-1];
	}
	return plaintext;
}
void ConvertKey(string Key)
{
	string Key1="";
	string LK[17];
	string RK[17];
	for(int count=0;count<56;count++)
	{
		Key1+=Key[PC1[count]-1];
	}
	LK[0].assign(Key1,0,28);
	RK[0].assign(Key1,28,28);
	for(int count=1;count<17;count++)
	{
		for(int count2=0;count2<28;count2++)
		{
			LK[count]+=LK[count-1][(count2+Turn[count-1])%28];
			RK[count]+=RK[count-1][(count2+Turn[count-1])%28];
		}
	}
	for(int count=0;count<16;count++)
	{
		secretkey[count]="";
		Key1="";
		Key1=LK[count+1]+RK[count+1];
		for(int count2=0;count2<48;count2++)
		{
			secretkey[count]+=Key1[PC2[count2]-1];
		}
	}
}

string Encryption()
{
	string plaintext;
	string plaintext2;
	int count;
	cout<<"Please input the right plaintext"<<endl;
	cin>>plaintext2;
	for(count=0;count<plaintext2.length();count++)
	{
		plaintext+=convert8digits((int)plaintext2[count]);
	}
	int length=plaintext.length();
	while(plaintext.length()%64!=0)
	{
		plaintext+='0';
	}
	string inputKey;
	string inputKey2;
	inputKey="";
	cout<<"Please input the right SecretKey "<<endl;
	cin>>inputKey2;
	for(count=0;count<inputKey2.length();count++)
	{
		inputKey+=convert8digits((int)inputKey2[count]);
	}
	string ExtraKey;
	for(count=0;count<16;count++)
	{
		ExtraKey+=convert4digits(count);
	}
	int length2=inputKey.length();
	if(length2>64)
	{
		inputKey.assign(inputKey,0,64);
	}
	else
	{
		for(;inputKey.length()<64;)
		{
			inputKey+=ExtraKey[inputKey.length()-length2];
		}
	}
	ConvertKey(inputKey);
	string cyphertext;
	string test;
	int number=plaintext.length()%64;
	for(count=0;count<number;count++)
	{
		test.assign(plaintext,64*count,64);
		cyphertext+=encryption(test,1);
	}
	cyphertext.assign(cyphertext,0,length);
	return cyphertext;
}

string Decode()
{
	string encryptions;
	string encryption2;
	int count;
	cout<<"Please input the right encryption"<<endl;
	cin>>encryption2;
    for(count=0;count<encryption2.length();count++)
	{
		encryptions+=convert8digits((int)encryption2[count]);
	}
	int length=encryptions.length();
	while(encryptions.length()%64!=0)
	{
		encryptions+='0';
	}
	string inputKey;
	string inputKey2;
	inputKey="";
	cout<<"Please input the right SecretKey "<<endl;
	cin>>inputKey2;
	for(count=0;count<inputKey2.length();count++)
	{
		inputKey+=convert8digits((int)inputKey2[count]);
	}
	string ExtraKey;
	for(count=0;count<16;count++)
	{
		ExtraKey+=convert4digits(count);
	}
	int length2=inputKey.length();
	if(length2>64)
	{
		inputKey.assign(inputKey,0,64);
	}
	else
	{
		for(;inputKey.length()<64;)
		{
			inputKey+=ExtraKey[inputKey.length()-length2];
		}
	}
	ConvertKey(inputKey);
	string plaintext;
	string test;
	int number=encryptions.length()/64;
	for(count=0;count<number;count++)
	{
		test.assign(encryptions,count*64,64);
		plaintext+=encryption(test,0);
	}
	plaintext.assign(plaintext,0,length);
	return plaintext;
}
void main()
{
	char choose;
	cout<<"You can input 1 to do encryption, 2 to decode, other words to quit"<<endl;
	cin>>choose;
	while(choose=='1'||choose=='2')
	{
		if(choose=='1')
		{
			cout<<"The cyphertext is: "<<endl<<Encryption()<<endl;
		}
		else
		{
			cout<<"The plaintext is: "<<endl<<Decode()<<endl;
		}
		cout<<"You can input 1 to do encryption, 2 to decode, other words to quit"<<endl;
		cin>>choose;
	}
}
